{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/rehypePrettyCode.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport { rehypePrettyCodeOptions } from \"./src/lib/rehypePrettyCode\";\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  contentType: \"mdx\",\n  filePathPattern: \"posts/*.mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (post) =>\n        post._raw.sourceFileName\n          // hello-world.mdx => hello-world\n          .replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"src/content\",\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [rehypePrettyCode, rehypePrettyCodeOptions],\n  },\n});\n", "import { type Options } from \"rehype-pretty-code\"\nimport { visit } from \"unist-util-visit\"\n\n// div.BLOCK > pre.PRE > code.CODE\nconst BLOCK =\n  \"overflow-hidden rounded-lg bg-rose-100/5 shadow-surface-elevation-low ring-1 ring-rose-100/[3%] ring-inset\"\nconst TITLE =\n  \"mb-0.5 rounded-md bg-rose-100/10 px-3 py-1 font-mono text-xs text-rose-100/70 shadow-sm\"\nconst PRE = \"overflow-x-auto py-2 text-[13px] leading-6 [color-scheme:dark]\"\nconst CODE =\n  \"grid [&>span]:border-l-4 [&>span]:border-l-transparent [&>span]:pl-2 [&>span]:pr-3\"\nconst INLINE_BLOCK =\n  \"whitespace-nowrap border border-rose-200/10 px-1.5 py-px text-[12px] rounded-full bg-white/5 whitespace-nowrap text-rose-300/90\"\nconst INLINE_CODE = \"\"\nconst NUMBERED_LINES =\n  \"[counter-reset:line] before:[&>span]:mr-3 before:[&>span]:inline-block before:[&>span]:w-4 before:[&>span]:text-right before:[&>span]:text-white/20 before:[&>span]:![content:counter(line)] before:[&>span]:[counter-increment:line]\"\nconst HIGHLIGHTED_LINE =\n  \"!border-l-rose-300/70 bg-rose-200/10 before:!text-white/70\"\n\nexport function rehypePrettyCodeClasses() {\n  return (tree: any) => {\n    visit(\n      tree,\n      (node: any) =>\n        Boolean(\n          node.tagName === \"code\" &&\n            Object.keys(node.properties).length === 0 &&\n            node.children.some((n: any) => n.type === \"text\"),\n        ),\n      (node: any) => {\n        const textNode = node.children.find((n: any) => n.type === \"text\")\n        textNode.type = \"element\"\n        textNode.tagName = \"code\"\n        textNode.properties = { className: [INLINE_CODE] }\n        textNode.children = [{ type: \"text\", value: textNode.value }]\n        node.properties.className = [INLINE_BLOCK]\n        node.tagName = \"span\"\n      },\n    )\n\n    visit(\n      tree,\n      (node: any) =>\n        Boolean(\n          typeof node?.properties?.[\"data-rehype-pretty-code-fragment\"] !==\n            \"undefined\",\n        ),\n      (node: any) => {\n        if (node.tagName === \"span\") {\n          node.properties.className = [\n            ...(node.properties.className || []),\n            INLINE_BLOCK,\n          ]\n          node.children[0].properties.className = [\n            ...(node.children[0].properties.className || []),\n            INLINE_CODE,\n          ]\n\n          return node\n        }\n\n        if (node.tagName === \"div\") {\n          node.properties.className = [\n            ...(node.properties.className || []),\n            BLOCK,\n          ]\n          node.children = node.children.map((node: any) => {\n            if (\n              node.tagName === \"div\" &&\n              typeof node.properties?.[\"data-rehype-pretty-code-title\"] !==\n                \"undefined\"\n            ) {\n              node.properties.className = [\n                ...(node.properties.className || []),\n                TITLE,\n              ]\n            }\n            if (node.tagName === \"pre\") {\n              node.properties.className = [PRE]\n              if (node.children[0].tagName === \"code\") {\n                node.children[0].properties.className = [\n                  ...(node.children[0].properties.className || []),\n                  CODE,\n                ]\n                if (\n                  typeof node.children[0].properties[\"data-line-numbers\"] !==\n                  \"undefined\"\n                ) {\n                  node.children[0].properties.className.push(NUMBERED_LINES)\n                }\n              }\n            }\n\n            return node\n          })\n\n          return node\n        }\n      },\n    )\n  }\n}\n\nexport const rehypePrettyCodeOptions: Partial<Options> = {\n  theme: \"one-dark-pro\",\n  tokensMap: {\n    // VScode command palette: Inspect Editor Tokens and Scopes\n    // https://github.com/Binaryify/OneDark-Pro/blob/47c66a2f2d3e5c85490e1aaad96f5fab3293b091/themes/OneDark-Pro.json\n    fn: \"entity.name.function\",\n    objKey: \"meta.object-literal.key\",\n  },\n  onVisitLine(node) {\n    // Prevent lines from collapsing in `display: grid` mode, and\n    // allow empty lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: \"text\", value: \" \" }]\n    }\n    node.properties.className = [\"\"]\n  },\n  onVisitHighlightedLine(node) {\n    node.properties.className.push(HIGHLIGHTED_LINE)\n  },\n}"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,sBAAsB;;;ACA7B,SAAS,aAAa;AAetB,IAAM,mBACJ;AAsFK,IAAM,0BAA4C;AAAA,EACvD,OAAO;AAAA,EACP,WAAW;AAAA;AAAA;AAAA,IAGT,IAAI;AAAA,IACJ,QAAQ;AAAA,EACV;AAAA,EACA,YAAY,MAAM;AAGhB,QAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,WAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IAC/C;AACA,SAAK,WAAW,YAAY,CAAC,EAAE;AAAA,EACjC;AAAA,EACA,uBAAuB,MAAM;AAC3B,SAAK,WAAW,UAAU,KAAK,gBAAgB;AAAA,EACjD;AACF;;;ADtHO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SACR,KAAK,KAAK,eAEP,QAAQ,UAAU,EAAE;AAAA,IAC3B;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,kBAAkB,uBAAuB;AAAA,EAC3D;AACF,CAAC;",
  "names": []
}
