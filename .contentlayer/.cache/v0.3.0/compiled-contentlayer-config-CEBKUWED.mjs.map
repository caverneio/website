{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../content/definitions/Post.ts", "../../../lib/formatShortDate.ts", "../../../content/definitions/Series.ts", "../../../content/definitions/Tag.ts", "../../../lib/contentlayer.ts", "../../../content/definitions/Video.ts", "../../../lib/constants.ts", "../../../lib/rehyePrettyCode.ts"],
  "sourcesContent": ["import { makeSource } from \"contentlayer/source-files\"\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport remarkGfm from \"remark-gfm\"\n// esbuild doesn't support module aliases \uD83D\uDE24\uD83E\uDD0C\n// https://github.com/evanw/esbuild/issues/394\n// https://github.com/contentlayerdev/contentlayer/issues/238\nimport { Post } from \"./content/definitions/Post\"\nimport { Video } from \"./content/definitions/Video\"\nimport { HEADING_LINK_ANCHOR } from \"./lib/constants\"\nimport {\n  rehypePrettyCodeClasses,\n  rehypePrettyCodeOptions,\n} from \"./lib/rehyePrettyCode\"\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Post, Video],\n  mdx: {\n    esbuildOptions(options) {\n      options.target = \"esnext\"\n      return options\n    },\n    remarkPlugins: [[remarkGfm]],\n    rehypePlugins: [\n      [rehypeSlug],\n      [rehypePrettyCode, rehypePrettyCodeOptions],\n      [rehypePrettyCodeClasses],\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"wrap\",\n          properties: {\n            className: [HEADING_LINK_ANCHOR],\n          },\n        },\n      ],\n    ],\n  },\n})\n", "import { defineDocumentType } from \"contentlayer/source-files\"\nimport GithubSlugger from \"github-slugger\"\n// esbuild doesn't support module aliases \uD83D\uDE24\uD83E\uDD0C\n// https://github.com/evanw/esbuild/issues/394\n// https://github.com/contentlayerdev/contentlayer/issues/238\nimport { formatShortDate } from \"../../lib/formatShortDate\"\nimport { Series } from \"./Series\"\nimport { Tag } from \"./Tag\"\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: \"posts/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    publishedAt: { type: \"string\", required: true },\n    description: { type: \"string\" },\n    status: { type: \"enum\", options: [\"draft\", \"published\"], required: true },\n    series: {\n      type: \"nested\",\n      of: Series,\n    },\n    tags: {\n      type: \"list\",\n      of: Tag,\n    },\n  },\n  computedFields: {\n    headings: {\n      type: \"json\",\n      resolve: async (doc) => {\n        // use same package as rehypeSlug so toc and sluggified headings match\n        // https://github.com/rehypejs/rehype-slug/blob/main/package.json#L36\n        const slugger = new GithubSlugger()\n\n        // https://stackoverflow.com/a/70802303\n        const regXHeader = /\\n\\n(?<flag>#{1,6})\\s+(?<content>.+)/g\n\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n          ({ groups }) => {\n            const flag = groups?.flag\n            const content = groups?.content\n            return {\n              heading: flag?.length,\n              text: content,\n              slug: content ? slugger.slug(content) : undefined,\n            }\n          },\n        )\n\n        return headings\n      },\n    },\n    tweetIds: {\n      type: \"json\",\n      resolve: (doc) => {\n        const tweetMatches = doc.body.raw.match(\n          /<StaticTweet\\sid=\"[0-9]+\"[\\s\\S]*?\\/>/g,\n        )\n        const tweetIDs = tweetMatches?.map(\n          (tweet: any) => tweet.match(/[0-9]+/g)[0],\n        )\n        return tweetIDs ?? []\n      },\n    },\n    publishedAtFormatted: {\n      type: \"string\",\n      resolve: (doc) => {\n        return formatShortDate(doc.publishedAt)\n      },\n    },\n    slug: {\n      type: \"string\",\n      resolve: (doc) =>\n        doc._raw.sourceFileName\n          // hello-world.mdx => hello-world\n          .replace(/\\.mdx$/, \"\"),\n    },\n  },\n}))\n", "import { format, isThisYear } from \"date-fns\"\n\nexport const formatShortDate = (date: string) => {\n  const _date = new Date(date)\n\n  return isThisYear(_date) ? format(_date, \"MMM d\") : format(_date, \"MMM d, y\")\n}\n", "import { defineNestedType } from \"contentlayer/source-files\"\n\nexport const Series = defineNestedType(() => ({\n  name: \"Series\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    order: {\n      type: \"number\",\n      required: true,\n    },\n  },\n}))\n", "import { defineNestedType } from \"contentlayer/source-files\"\n// esbuild doesn't support module aliases \uD83D\uDE24\uD83E\uDD0C\n// https://github.com/evanw/esbuild/issues/394\n// https://github.com/contentlayerdev/contentlayer/issues/238\nimport { allTagNames, allTagSlugs } from \"../../lib/contentlayer\"\n\nexport const Tag = defineNestedType(() => ({\n  name: \"Tag\",\n  fields: {\n    title: {\n      type: \"enum\",\n      required: true,\n      options: allTagNames,\n    },\n    slug: {\n      type: \"enum\",\n      required: true,\n      options: allTagSlugs,\n    },\n  },\n}))\n", "import { pick } from \"contentlayer/client\"\nimport { Post, Video } from \"contentlayer/generated\"\n\nexport const allTagNames = [\"Next.js\", \"MDX\", \"Next Conf\", \"React Conf\"]\nexport const allTagSlugs = [\"next\", \"mdx\", \"next-conf\", \"react-conf\"]\n\nexport const formatVideoPreview = (video: Video) => {\n  const partialVideo = pick(video, [\"title\", \"description\", \"youtube\", \"tags\"])\n\n  return {\n    ...partialVideo,\n    title: partialVideo.title || partialVideo.youtube.title,\n    type: video.type,\n    publishedAt: partialVideo.youtube.publishedAt,\n    tags: partialVideo.tags || [],\n  }\n}\n\nexport const formatPostPreview = (post: Post) => {\n  const partialPost = pick(post, [\n    \"tags\",\n    \"slug\",\n    \"title\",\n    \"description\",\n    \"publishedAt\",\n    \"publishedAtFormatted\",\n  ])\n\n  return {\n    ...partialPost,\n    type: post.type,\n    description: partialPost.description ?? null,\n    tags: partialPost.tags || [],\n  }\n}\n\nexport const getVideoDetails = async (id: string) => {\n  const res = await fetch(\n    `https://www.googleapis.com/youtube/v3/videos?part=contentDetails%2Csnippet%2Cstatistics&id=${id}&key=${process.env.YOUTUBE_DATA_API_KEY}`,\n  ).then((x) => x.json())\n\n  if (!res.items?.[0]) {\n    throw new Error(\"Video not found\")\n  }\n\n  const video = res.items[0]\n\n  const duration = video.contentDetails?.duration\n  const views = video.statistics?.viewCount\n  const likes = video.statistics?.likeCount\n  const thumbnail = video.snippet?.thumbnails?.maxres?.url\n  const title = video.snippet?.title\n  const publishedAt = video.snippet?.publishedAt\n\n  return {\n    views: views ? Number(views) : 0,\n    likes: likes ? Number(likes) : 0,\n    thumbnail,\n    title,\n    publishedAt,\n    duration: duration\n      ? duration\n          // PT1M2S => 01:02\n          .replace(/PT/, \"\")\n          .replace(/H/, \":\")\n          .replace(/M/, \":\")\n          .replace(/S/, \"\")\n          .split(\":\")\n          .map((digit: string) => {\n            if (Number(digit) <= 9) {\n              return \"0\" + digit\n            } else {\n              return digit\n            }\n          })\n          .join(\":\")\n      : 0,\n  }\n}\n\n// don't send fields we don't use to the client\n// the biggest culprit is post.body.raw (the raw MDX source)\nexport const getPartialPost = (\n  {\n    title,\n    slug,\n    publishedAtFormatted,\n    description,\n    body,\n    series,\n    headings,\n  }: Post,\n  allPosts: Post[],\n) => ({\n  title,\n  slug,\n  publishedAtFormatted,\n  description: description ?? null,\n  body: {\n    code: body.code,\n  },\n  headings:\n    (headings as { heading: number; text: string; slug: string }[]) ?? null,\n  series: series\n    ? {\n        title: series.title,\n        posts: allPosts\n          .filter((p) => p.series?.title === series.title)\n          .sort(\n            (a, b) =>\n              Number(new Date(a.series!.order)) -\n              Number(new Date(b.series!.order)),\n          )\n          .map((p) => {\n            return {\n              title: p.title,\n              slug: p.slug,\n              status: p.status,\n              isCurrent: p.slug === slug,\n            }\n          }),\n      }\n    : null,\n})\n", "import { defineDocumentType, defineNestedType } from \"contentlayer/source-files\"\n// esbuild doesn't support module aliases \uD83D\uDE24\uD83E\uDD0C\n// https://github.com/evanw/esbuild/issues/394\n// https://github.com/contentlayerdev/contentlayer/issues/238\nimport { getVideoDetails } from \"../../lib/contentlayer\"\nimport { formatShortDate } from \"../../lib/formatShortDate\"\nimport { Tag } from \"./Tag\"\n\n// eventually we will use contentlayer's remote content feature to generate\n// this from Youtube's API\nexport const Video = defineDocumentType(() => ({\n  name: \"Video\",\n  filePathPattern: \"video/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    tags: {\n      type: \"list\",\n      of: Tag,\n    },\n    title: {\n      type: \"string\",\n      description: \"Override the default Youtube title\",\n    },\n    description: { type: \"string\", required: true },\n  },\n  computedFields: {\n    youtube: {\n      type: \"nested\",\n      // doesn't generate types yet https://github.com/contentlayerdev/contentlayer/issues/149\n      of: defineNestedType(() => ({\n        name: \"YoutubeVideo\",\n        fields: {\n          id: {\n            type: \"string\",\n            required: true,\n          },\n          title: {\n            type: \"string\",\n            required: true,\n          },\n          views: {\n            type: \"string\",\n            required: true,\n          },\n          thumbnail: {\n            type: \"string\",\n            required: true,\n          },\n          url: {\n            type: \"string\",\n            required: true,\n          },\n          duration: {\n            type: \"string\",\n            required: true,\n          },\n          publishedAt: {\n            type: \"string\",\n            required: true,\n          },\n        },\n      })),\n      resolve: async (doc) => {\n        const id = doc._raw.sourceFileName.replace(/\\.mdx$/, \"\")\n\n        const data = await getVideoDetails(id)\n\n        return {\n          id,\n          url: `https://www.youtube.com/watch?v=${id}`,\n          publishedAtFormatted: formatShortDate(data.publishedAt),\n          ...data,\n        }\n      },\n    },\n  },\n}))\n", "// show customised outline when an element has focus (but only if the user is\n// using the keyboard)\n// TODO: move this to a global css rule\nexport const FOCUS_VISIBLE_OUTLINE = `focus:outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-500/70`\n\nexport const LINK_STYLES = `text-neutral-100/90 underline decoration-neutral-200/30 underline-offset-2 transition-all hover:text-neutral-100 hover:decoration-neutral-200/50`\n\nexport const LINK_SUBTLE_STYLES = `hover:underline hover:decoration-neutral-300/30 hover:underline-offset-2 hover:text-neutral-200/90`\n\nexport const HEADING_LINK_ANCHOR = `before:content-['#'] before:absolute before:-ml-[1em] before:text-neutral-100/0 hover:before:text-neutral-100/50 pl-[1em] -ml-[1em]`\n", "import { type Options } from \"rehype-pretty-code\"\nimport { visit } from \"unist-util-visit\"\n\n// div.BLOCK > pre.PRE > code.CODE\nconst BLOCK =\n  \"overflow-hidden rounded-lg bg-neutral-100/5 shadow-surface-elevation-low ring-1 ring-neutral-100/[3%] ring-inset\"\nconst TITLE =\n  \"mb-0.5 rounded-md bg-neutral-100/10 px-3 py-1 font-mono text-xs text-neutral-100/70 shadow-sm\"\nconst PRE = \"overflow-x-auto py-2 text-[13px] leading-6 [color-scheme:dark]\"\nconst CODE =\n  \"grid [&>span]:border-l-4 [&>span]:border-l-transparent [&>span]:pl-2 [&>span]:pr-3\"\nconst INLINE_BLOCK =\n  \"whitespace-nowrap border border-neutral-200/10 px-1.5 py-px text-[12px] rounded-full bg-white/5 whitespace-nowrap text-neutral-300/90\"\nconst INLINE_CODE = \"\"\nconst NUMBERED_LINES =\n  \"[counter-reset:line] before:[&>span]:mr-3 before:[&>span]:inline-block before:[&>span]:w-4 before:[&>span]:text-right before:[&>span]:text-white/20 before:[&>span]:![content:counter(line)] before:[&>span]:[counter-increment:line]\"\nconst HIGHLIGHTED_LINE =\n  \"!border-l-neutral-300/70 bg-neutral-200/10 before:!text-white/70\"\n\nexport function rehypePrettyCodeClasses() {\n  return (tree: any) => {\n    visit(\n      tree,\n      (node: any) =>\n        Boolean(\n          node.tagName === \"code\" &&\n            Object.keys(node.properties).length === 0 &&\n            node.children.some((n: any) => n.type === \"text\"),\n        ),\n      (node: any) => {\n        const textNode = node.children.find((n: any) => n.type === \"text\")\n        textNode.type = \"element\"\n        textNode.tagName = \"code\"\n        textNode.properties = { className: [INLINE_CODE] }\n        textNode.children = [{ type: \"text\", value: textNode.value }]\n        node.properties.className = [INLINE_BLOCK]\n        node.tagName = \"span\"\n      },\n    )\n\n    visit(\n      tree,\n      (node: any) =>\n        Boolean(\n          typeof node?.properties?.[\"data-rehype-pretty-code-fragment\"] !==\n            \"undefined\",\n        ),\n      (node: any) => {\n        if (node.tagName === \"span\") {\n          node.properties.className = [\n            ...(node.properties.className || []),\n            INLINE_BLOCK,\n          ]\n          node.children[0].properties.className = [\n            ...(node.children[0].properties.className || []),\n            INLINE_CODE,\n          ]\n\n          return node\n        }\n\n        if (node.tagName === \"div\") {\n          node.properties.className = [\n            ...(node.properties.className || []),\n            BLOCK,\n          ]\n          node.children = node.children.map((node: any) => {\n            if (\n              node.tagName === \"div\" &&\n              typeof node.properties?.[\"data-rehype-pretty-code-title\"] !==\n                \"undefined\"\n            ) {\n              node.properties.className = [\n                ...(node.properties.className || []),\n                TITLE,\n              ]\n            }\n            if (node.tagName === \"pre\") {\n              node.properties.className = [PRE]\n              if (node.children[0].tagName === \"code\") {\n                node.children[0].properties.className = [\n                  ...(node.children[0].properties.className || []),\n                  CODE,\n                ]\n                if (\n                  typeof node.children[0].properties[\"data-line-numbers\"] !==\n                  \"undefined\"\n                ) {\n                  node.children[0].properties.className.push(NUMBERED_LINES)\n                }\n              }\n            }\n\n            return node\n          })\n\n          return node\n        }\n      },\n    )\n  }\n}\n\nexport const rehypePrettyCodeOptions: Partial<Options> = {\n  theme: \"one-dark-pro\",\n  tokensMap: {\n    // VScode command palette: Inspect Editor Tokens and Scopes\n    // https://github.com/Binaryify/OneDark-Pro/blob/47c66a2f2d3e5c85490e1aaad96f5fab3293b091/themes/OneDark-Pro.json\n    fn: \"entity.name.function\",\n    objKey: \"meta.object-literal.key\",\n  },\n  onVisitLine(node) {\n    // Prevent lines from collapsing in `display: grid` mode, and\n    // allow empty lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: \"text\", value: \" \" }]\n    }\n    node.properties.className = [\"\"]\n  },\n  onVisitHighlightedLine(node) {\n    node.properties.className.push(HIGHLIGHTED_LINE)\n  },\n}\n"],
  "mappings": "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",
  "names": ["defineNestedType", "defineNestedType", "defineDocumentType", "defineNestedType", "defineDocumentType", "defineNestedType", "node"]
}
